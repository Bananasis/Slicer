//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""ScreenInput"",
            ""id"": ""df3acb36-ce60-4b6b-baac-f1595ced9a45"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""05b1eea5-8177-4be2-bad0-158c616505db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f5dbceda-6b6a-4841-b69c-24b1e555c986"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cba6f125-0930-4017-8fe0-150a130dcf69"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c8925e2-752a-469a-b6a3-bec3bde86ab1"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee692856-126a-4d71-9632-e3bc7d870039"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccf0e458-dfd0-4183-b361-29d410d83a7a"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ScreenInput
        m_ScreenInput = asset.FindActionMap("ScreenInput", throwIfNotFound: true);
        m_ScreenInput_Aim = m_ScreenInput.FindAction("Aim", throwIfNotFound: true);
        m_ScreenInput_Position = m_ScreenInput.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScreenInput
    private readonly InputActionMap m_ScreenInput;
    private List<IScreenInputActions> m_ScreenInputActionsCallbackInterfaces = new List<IScreenInputActions>();
    private readonly InputAction m_ScreenInput_Aim;
    private readonly InputAction m_ScreenInput_Position;
    public struct ScreenInputActions
    {
        private @NewControls m_Wrapper;
        public ScreenInputActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_ScreenInput_Aim;
        public InputAction @Position => m_Wrapper.m_ScreenInput_Position;
        public InputActionMap Get() { return m_Wrapper.m_ScreenInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScreenInputActions set) { return set.Get(); }
        public void AddCallbacks(IScreenInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Add(instance);
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
        }

        private void UnregisterCallbacks(IScreenInputActions instance)
        {
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
        }

        public void RemoveCallbacks(IScreenInputActions instance)
        {
            if (m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScreenInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ScreenInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScreenInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScreenInputActions @ScreenInput => new ScreenInputActions(this);
    public interface IScreenInputActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
